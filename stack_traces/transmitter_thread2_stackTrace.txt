__gnu_cxx::__ops::_Iter_equals_val<AMQP::Monitor* const>::operator()<__gnu_cxx::__normal_iterator<AMQP::Monitor**, std::vector<AMQP::Monitor*, std::allocator<AMQP::Monitor*> > > >(__gnu_cxx::__ops::_Iter_equals_val<AMQP::Monitor* const> * const this, __gnu_cxx::__normal_iterator<AMQP::Monitor**, std::vector<AMQP::Monitor*, std::allocator<AMQP::Monitor*> > > __it) (/usr/include/c++/9/bits/predefined_ops.h:241)
std::__remove_if<__gnu_cxx::__normal_iterator<AMQP::Monitor**, std::vector<AMQP::Monitor*, std::allocator<AMQP::Monitor*> > >, __gnu_cxx::__ops::_Iter_equals_val<AMQP::Monitor* const> >(__gnu_cxx::__normal_iterator<AMQP::Monitor**, std::vector<AMQP::Monitor*, std::allocator<AMQP::Monitor*> > > __first, __gnu_cxx::__normal_iterator<AMQP::Monitor**, std::vector<AMQP::Monitor*, std::allocator<AMQP::Monitor*> > > __last, __gnu_cxx::__ops::_Iter_equals_val<AMQP::Monitor* const> __pred) (/usr/include/c++/9/bits/stl_algo.h:875)
std::remove<__gnu_cxx::__normal_iterator<AMQP::Monitor**, std::vector<AMQP::Monitor*, std::allocator<AMQP::Monitor*> > >, AMQP::Monitor*>(__gnu_cxx::__normal_iterator<AMQP::Monitor**, std::vector<AMQP::Monitor*, std::allocator<AMQP::Monitor*> > > __first, __gnu_cxx::__normal_iterator<AMQP::Monitor**, std::vector<AMQP::Monitor*, std::allocator<AMQP::Monitor*> > > __last, AMQP::Monitor * const& __value) (/usr/include/c++/9/bits/stl_algo.h:912)
AMQP::Watchable::remove(AMQP::Watchable * const this, AMQP::Monitor * monitor) (/build/external/amqp-cpp/include/amqpcpp/watchable.h:60)
AMQP::Monitor::~Monitor(AMQP::Monitor * const this) (/build/external/amqp-cpp/include/amqpcpp/monitor.h:94)
AMQP::ChannelImpl::publish(AMQP::ChannelImpl * const this, const std::string & exchange, const std::string & routingKey, const AMQP::Envelope & envelope, int flags) (/build/external/amqp-cpp/src/channelimpl.cpp:492)
AMQP::Channel::publish(AMQP::Channel * const this, const std::string & exchange, const std::string & routingKey, const AMQP::Envelope & envelope, int flags) (/build/external/amqp-cpp/include/amqpcpp/channel.h:404)
---------------------------------
RabbitMQTransmitter::SendMessage(RabbitMQTransmitter * const this, const std::string & messageBody) (test_app.cpp:174)
--------------------------------
<lambda()>::operator()(void) const(const <lambda()> * const __closure) (test_app.cpp:322)
std::__invoke_impl<void, main()::<lambda()> >(std::__invoke_other, <lambda()> &&)(<lambda()> && __f) (/usr/include/c++/9/bits/invoke.h:60)
std::__invoke<main()::<lambda()> >(<lambda()> &&)(<lambda()> && __fn) (/usr/include/c++/9/bits/invoke.h:95)
std::thread::_Invoker<std::tuple<main()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>)(std::thread::_Invoker<std::tuple<main()::<lambda()> > > * const this) (/usr/include/c++/9/thread:244)
std::thread::_Invoker<std::tuple<main()::<lambda()> > >::operator()(void)(std::thread::_Invoker<std::tuple<main()::<lambda()> > > * const this) (/usr/include/c++/9/thread:251)
std::thread::_State_impl<std::thread::_Invoker<std::tuple<main()::<lambda()> > > >::_M_run(void)(std::thread::_State_impl<std::thread::_Invoker<std::tuple<main()::<lambda()> > > > * const this) (/usr/include/c++/9/thread:195)
libstdc++.so.6![Unknown/Just-In-Time compiled code] (Unknown Source:0)
libpthread.so.0!start_thread(void * arg) (/build/glibc-SzIz7B/glibc-2.31/nptl/pthread_create.c:477)
libc.so.6!clone() (/build/glibc-SzIz7B/glibc-2.31/sysdeps/unix/sysv/linux/x86_64/clone.S:95)
